// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String           @id @default(uuid())
  name               String
  email              String           @unique
  password           String // üîê new
  phone              String? // ‚òéÔ∏è optional
  role               Role
  isVerified         Boolean          @default(false)
  kycStatus          KycStatus        @default(PENDING)
  createdAt          DateTime         @default(now())
  profile            Profile?
  resume             Resume? // üìÑ 1-to-1
  requests           ServiceRequest[] @relation("CustomerRequests")
  projectsAsCustomer Project[]        @relation("CustomerProjects")
  projectsAsProvider Project[]        @relation("ProviderProjects")
  matches            AiMatch[]
  reviewsGiven       Review[]         @relation("Reviewer")
  reviewsReceived    Review[]         @relation("Recipient")
}

model Profile {
  id              String             @id @default(uuid())
  user            User               @relation(fields: [userId], references: [id])
  userId          String             @unique
  bio             String?
  location        String?
  skills          String[]
  yearsExperience Int?
  hourlyRate      Float?
  availability    Json?
  portfolioUrls   String[]
  profileVideoUrl String? // üÜï Profile video
  website         String? // üÜï Personal or company site
  languages       String[] // üÜï Spoken languages
  completion      Int? // üÜï Completion %
  certifications  Certification[] // ‚ûï relation
  performance     PerformanceStat? // ‚ûï relation
  portfolios      ProjectPortfolio[] // ‚ûï relation
}

model Certification {
  id         String   @id @default(uuid())
  profile    Profile  @relation(fields: [profileId], references: [id])
  profileId  String
  name       String
  issuer     String
  issuedDate DateTime
  verified   Boolean  @default(false)
}

model PerformanceStat {
  id             String  @id @default(uuid())
  profile        Profile @relation(fields: [profileId], references: [id])
  profileId      String  @unique
  totalProjects  Int     @default(0)
  completionRate Float   @default(0)
  onTimeDelivery Float   @default(0)
  responseTime   String  @default("N/A") // Example: "2 hours"
  repeatClients  Float   @default(0)
}

model ProjectPortfolio {
  id          String   @id @default(uuid())
  profile     Profile  @relation(fields: [profileId], references: [id])
  profileId   String
  title       String
  description String
  techStack   String[] // Tags: React, Node.js etc
  client      String?
  date        DateTime
  imageUrl    String?
  externalUrl String? // Optional live link
}

model Review {
  id          String   @id @default(uuid())
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String   @unique // 1 review per project
  reviewer    User     @relation("Reviewer", fields: [reviewerId], references: [id])
  reviewerId  String
  recipient   User     @relation("Recipient", fields: [recipientId], references: [id])
  recipientId String
  company     String? // Optional: shown as "TechStart Sdn Bhd"
  role        String? // e.g. ‚ÄúProject Manager‚Äù
  content     String // The review text
  rating      Float // e.g. 4.9
  createdAt   DateTime @default(now())
}

model Resume {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  fileUrl     String // S3 or local path
  description String? // Summarized by LangChain
  uploadedAt  DateTime @default(now())
}

model ServiceRequest {
  id             String          @id @default(uuid())
  customer       User            @relation("CustomerRequests", fields: [customerId], references: [id])
  customerId     String
  title          String
  description    String
  category       ServiceCategory
  budgetMin      Float
  budgetMax      Float
  aiStackSuggest String[]
  status         RequestStatus   @default(OPEN)
  createdAt      DateTime        @default(now())
  matches        AiMatch[]
  project        Project?
}

model AiMatch {
  id         String         @id @default(uuid())
  request    ServiceRequest @relation(fields: [requestId], references: [id])
  requestId  String
  provider   User           @relation(fields: [providerId], references: [id])
  providerId String
  matchScore Float
  aiReason   String
}

model Project {
  id               String          @id @default(uuid())
  serviceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id])
  serviceRequestId String?         @unique
  customer         User            @relation("CustomerProjects", fields: [customerId], references: [id])
  customerId       String
  provider         User            @relation("ProviderProjects", fields: [providerId], references: [id])
  providerId       String
  status           ProjectStatus
  ndaSigned        Boolean         @default(false)
  milestones       Milestone[]
  payments         Payment[]
  review           Review? // 1-to-1
}

model Milestone {
  id          String          @id @default(uuid())
  project     Project         @relation(fields: [projectId], references: [id])
  projectId   String
  title       String
  description String
  dueDate     DateTime
  amount      Float
  status      MilestoneStatus @default(PENDING)
  payments    Payment[]
}

model Payment {
  id          String        @id @default(uuid())
  project     Project       @relation(fields: [projectId], references: [id])
  projectId   String
  milestone   Milestone?    @relation(fields: [milestoneId], references: [id])
  milestoneId String?
  amount      Float
  method      PaymentMethod
  status      PaymentStatus
}

enum Role {
  CUSTOMER
  PROVIDER
  ADMIN
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ServiceCategory {
  WEB
  MOBILE
  IOT
  CLOUD
  AI
  OTHER
}

enum RequestStatus {
  OPEN
  MATCHED
  CLOSED
}

enum ProjectStatus {
  IN_PROGRESS
  COMPLETED
  DISPUTED
}

enum MilestoneStatus {
  PENDING
  COMPLETED
  RELEASED
}

enum PaymentMethod {
  FPX
  STRIPE
  EWALLET
}

enum PaymentStatus {
  ESCROWED
  RELEASED
  REFUNDED
}
