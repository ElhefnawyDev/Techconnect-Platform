
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  role: 'role',
  kycStatus: 'kycStatus',
  name: 'name',
  phone: 'phone',
  isVerified: 'isVerified',
  createdAt: 'createdAt'
};

exports.Prisma.ProviderProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  location: 'location',
  bio: 'bio',
  hourlyRate: 'hourlyRate',
  availability: 'availability',
  portfolioUrls: 'portfolioUrls',
  profileVideoUrl: 'profileVideoUrl',
  languages: 'languages',
  rating: 'rating',
  totalReviews: 'totalReviews',
  totalProjects: 'totalProjects',
  totalEarnings: 'totalEarnings',
  viewsCount: 'viewsCount',
  successRate: 'successRate',
  responseTime: 'responseTime',
  isFeatured: 'isFeatured',
  isVerified: 'isVerified',
  skills: 'skills',
  yearsExperience: 'yearsExperience',
  website: 'website',
  completion: 'completion',
  minimumProjectBudget: 'minimumProjectBudget',
  maximumProjectBudget: 'maximumProjectBudget',
  preferredProjectDuration: 'preferredProjectDuration',
  workPreference: 'workPreference',
  teamSize: 'teamSize',
  companySize: 'companySize',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  bio: 'bio',
  location: 'location',
  companySize: 'companySize',
  description: 'description',
  website: 'website',
  logoUrl: 'logoUrl',
  establishedYear: 'establishedYear',
  employeeCount: 'employeeCount',
  languages: 'languages',
  completion: 'completion',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CertificationScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  name: 'name',
  issuer: 'issuer',
  issuedDate: 'issuedDate',
  verified: 'verified'
};

exports.Prisma.PerformanceStatScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  totalProjects: 'totalProjects',
  completionRate: 'completionRate',
  onTimeDelivery: 'onTimeDelivery',
  responseTime: 'responseTime',
  repeatClients: 'repeatClients'
};

exports.Prisma.ProjectPortfolioScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  title: 'title',
  description: 'description',
  techStack: 'techStack',
  client: 'client',
  date: 'date',
  imageUrl: 'imageUrl',
  externalUrl: 'externalUrl'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  reviewerId: 'reviewerId',
  recipientId: 'recipientId',
  company: 'company',
  role: 'role',
  content: 'content',
  rating: 'rating',
  communicationRating: 'communicationRating',
  qualityRating: 'qualityRating',
  timelinessRating: 'timelinessRating',
  createdAt: 'createdAt'
};

exports.Prisma.ResumeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  fileUrl: 'fileUrl',
  description: 'description',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.ServiceRequestScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  title: 'title',
  description: 'description',
  category: 'category',
  budgetMin: 'budgetMin',
  budgetMax: 'budgetMax',
  aiStackSuggest: 'aiStackSuggest',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.AiMatchScalarFieldEnum = {
  id: 'id',
  requestId: 'requestId',
  providerId: 'providerId',
  matchScore: 'matchScore',
  aiReason: 'aiReason'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  serviceRequestId: 'serviceRequestId',
  customerId: 'customerId',
  providerId: 'providerId',
  status: 'status',
  ndaSigned: 'ndaSigned',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  invoiceNumber: 'invoiceNumber',
  projectId: 'projectId',
  providerId: 'providerId',
  customerId: 'customerId',
  status: 'status',
  subtotal: 'subtotal',
  taxAmount: 'taxAmount',
  discountAmount: 'discountAmount',
  totalAmount: 'totalAmount',
  currency: 'currency',
  issueDate: 'issueDate',
  dueDate: 'dueDate',
  paidDate: 'paidDate',
  notes: 'notes',
  terms: 'terms',
  invoiceData: 'invoiceData',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MilestoneScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  title: 'title',
  description: 'description',
  dueDate: 'dueDate',
  amount: 'amount',
  status: 'status'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  milestoneId: 'milestoneId',
  amount: 'amount',
  method: 'method',
  status: 'status',
  invoiceId: 'invoiceId'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  senderId: 'senderId',
  receiverId: 'receiverId',
  messageType: 'messageType',
  subject: 'subject',
  content: 'content',
  attachments: 'attachments',
  isRead: 'isRead',
  readAt: 'readAt',
  parentMessageId: 'parentMessageId',
  messageThreadId: 'messageThreadId',
  isSystemMessage: 'isSystemMessage',
  priority: 'priority',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  CUSTOMER: 'CUSTOMER',
  PROVIDER: 'PROVIDER',
  ADMIN: 'ADMIN'
};

exports.KycStatus = exports.$Enums.KycStatus = {
  active: 'active',
  inactive: 'inactive',
  suspended: 'suspended',
  pending_verification: 'pending_verification'
};

exports.ServiceCategory = exports.$Enums.ServiceCategory = {
  WEB: 'WEB',
  MOBILE: 'MOBILE',
  IOT: 'IOT',
  CLOUD: 'CLOUD',
  AI: 'AI',
  OTHER: 'OTHER'
};

exports.RequestStatus = exports.$Enums.RequestStatus = {
  OPEN: 'OPEN',
  MATCHED: 'MATCHED',
  CLOSED: 'CLOSED'
};

exports.ProjectStatus = exports.$Enums.ProjectStatus = {
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  DISPUTED: 'DISPUTED'
};

exports.MilestoneStatus = exports.$Enums.MilestoneStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  RELEASED: 'RELEASED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  FPX: 'FPX',
  STRIPE: 'STRIPE',
  EWALLET: 'EWALLET'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  ESCROWED: 'ESCROWED',
  RELEASED: 'RELEASED',
  REFUNDED: 'REFUNDED'
};

exports.MessageType = exports.$Enums.MessageType = {
  text: 'text',
  file: 'file',
  system: 'system',
  proposal: 'proposal'
};

exports.Prisma.ModelName = {
  User: 'User',
  ProviderProfile: 'ProviderProfile',
  CustomerProfile: 'CustomerProfile',
  Certification: 'Certification',
  PerformanceStat: 'PerformanceStat',
  ProjectPortfolio: 'ProjectPortfolio',
  Review: 'Review',
  Resume: 'Resume',
  ServiceRequest: 'ServiceRequest',
  AiMatch: 'AiMatch',
  Project: 'Project',
  Invoice: 'Invoice',
  Milestone: 'Milestone',
  Payment: 'Payment',
  Message: 'Message'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
